-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sandbox_AXIvideo2Mat_16_640_480_16_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    AXI_video_strm_V_data_V_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AXI_video_strm_V_data_V_2_ap_vld : OUT STD_LOGIC;
    video_in_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    video_in_TVALID : IN STD_LOGIC;
    video_in_TREADY : OUT STD_LOGIC;
    video_in_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    video_in_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    video_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_0_V_full_n : IN STD_LOGIC;
    img_data_stream_0_V_write : OUT STD_LOGIC;
    img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_1_V_full_n : IN STD_LOGIC;
    img_data_stream_1_V_write : OUT STD_LOGIC;
    img_data_stream_0_V_ap_vld : OUT STD_LOGIC;
    img_data_stream_1_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of sandbox_AXIvideo2Mat_16_640_480_16_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_pp1_stg0_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_st7_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st8_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv9_1E0 : STD_LOGIC_VECTOR (8 downto 0) := "111100000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_1DF : STD_LOGIC_VECTOR (8 downto 0) := "111011111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_true : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_26 : BOOLEAN;
    signal eol_1_reg_193 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_1_reg_204 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_1_reg_215 : STD_LOGIC_VECTOR (8 downto 0);
    signal res_1_reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal eol_reg_237 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_2_reg_249 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_reg_261 : STD_LOGIC_VECTOR (15 downto 0);
    signal eol_2_reg_273 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_reg_464 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_75 : BOOLEAN;
    signal tmp_last_V_reg_472 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_89 : BOOLEAN;
    signal i_V_fu_357_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_V_reg_488 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond2_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_493 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_100 : BOOLEAN;
    signal brmerge_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_108 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal j_V_fu_369_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal res_2_fu_431_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_2_reg_506 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_439_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_511 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_516 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_135 : BOOLEAN;
    signal ap_sig_bdd_140 : BOOLEAN;
    signal res_4_fu_458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_last_V_3_reg_284 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V1_reg_149 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_160 : BOOLEAN;
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_167 : BOOLEAN;
    signal axi_data_V_3_reg_296 : STD_LOGIC_VECTOR (15 downto 0);
    signal axi_data_V1_reg_159 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_s_reg_169 : STD_LOGIC_VECTOR (9 downto 0);
    signal res_3_reg_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal eol_1_phi_fu_196_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_1_phi_fu_207_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_1_phi_fu_229_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal eol_phi_fu_241_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_phiprechg_axi_last_V_2_reg_249pp1_it0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_phiprechg_p_Val2_s_reg_261pp1_it0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_phi_fu_265_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_phiprechg_eol_2_reg_273pp1_it0 : STD_LOGIC_VECTOR (0 downto 0);
    signal eol_2_phi_fu_277_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_1_mux_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal eol_3_reg_320 : STD_LOGIC_VECTOR (0 downto 0);
    signal sof_1_fu_106 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_sof_2_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_403_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_6_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_413_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_8_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_1_s_fu_423_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_user_V_fu_342_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_bdd_324 : BOOLEAN;
    signal ap_sig_bdd_107 : BOOLEAN;
    signal ap_sig_bdd_195 : BOOLEAN;
    signal ap_sig_bdd_120 : BOOLEAN;
    signal ap_sig_bdd_211 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond1_fu_351_p2 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and not((exitcond2_fu_363_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_351_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_fu_363_p2 = ap_const_lv1_0) and not((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_351_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and not((exitcond2_fu_363_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- axi_data_V1_reg_159 assign process. --
    axi_data_V1_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                axi_data_V1_reg_159 <= tmp_data_V_reg_464;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6)) then 
                axi_data_V1_reg_159 <= axi_data_V_3_reg_296;
            end if; 
        end if;
    end process;

    -- axi_data_V_1_reg_204 assign process. --
    axi_data_V_1_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and (exitcond2_reg_493 = ap_const_lv1_0))) then 
                axi_data_V_1_reg_204 <= p_Val2_s_reg_261;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_351_p2 = ap_const_lv1_0))) then 
                axi_data_V_1_reg_204 <= axi_data_V1_reg_159;
            end if; 
        end if;
    end process;

    -- axi_data_V_3_reg_296 assign process. --
    axi_data_V_3_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and not((exitcond2_fu_363_p2 = ap_const_lv1_0)))) then 
                axi_data_V_3_reg_296 <= axi_data_V_1_phi_fu_207_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_3_reg_320) and not(ap_sig_bdd_140))) then 
                axi_data_V_3_reg_296 <= video_in_TDATA;
            end if; 
        end if;
    end process;

    -- axi_last_V1_reg_149 assign process. --
    axi_last_V1_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                axi_last_V1_reg_149 <= tmp_last_V_reg_472;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6)) then 
                axi_last_V1_reg_149 <= axi_last_V_3_reg_284;
            end if; 
        end if;
    end process;

    -- axi_last_V_2_reg_249 assign process. --
    axi_last_V_2_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_120) then
                if (ap_sig_bdd_195) then 
                    axi_last_V_2_reg_249 <= eol_1_phi_fu_196_p4;
                elsif (ap_sig_bdd_107) then 
                    axi_last_V_2_reg_249 <= video_in_TLAST;
                elsif ((ap_true = ap_true)) then 
                    axi_last_V_2_reg_249 <= ap_reg_phiprechg_axi_last_V_2_reg_249pp1_it0;
                end if;
            end if; 
        end if;
    end process;

    -- axi_last_V_3_reg_284 assign process. --
    axi_last_V_3_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and not((exitcond2_fu_363_p2 = ap_const_lv1_0)))) then 
                axi_last_V_3_reg_284 <= eol_1_phi_fu_196_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_3_reg_320) and not(ap_sig_bdd_140))) then 
                axi_last_V_3_reg_284 <= video_in_TLAST;
            end if; 
        end if;
    end process;

    -- eol_1_reg_193 assign process. --
    eol_1_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and (exitcond2_reg_493 = ap_const_lv1_0))) then 
                eol_1_reg_193 <= axi_last_V_2_reg_249;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_351_p2 = ap_const_lv1_0))) then 
                eol_1_reg_193 <= axi_last_V1_reg_149;
            end if; 
        end if;
    end process;

    -- eol_2_reg_273 assign process. --
    eol_2_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_120) then
                if (ap_sig_bdd_195) then 
                    eol_2_reg_273 <= axi_last_V_1_mux_fu_390_p2;
                elsif (ap_sig_bdd_107) then 
                    eol_2_reg_273 <= video_in_TLAST;
                elsif ((ap_true = ap_true)) then 
                    eol_2_reg_273 <= ap_reg_phiprechg_eol_2_reg_273pp1_it0;
                end if;
            end if; 
        end if;
    end process;

    -- eol_3_reg_320 assign process. --
    eol_3_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and not((exitcond2_fu_363_p2 = ap_const_lv1_0)))) then 
                eol_3_reg_320 <= eol_phi_fu_241_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_3_reg_320) and not(ap_sig_bdd_140))) then 
                eol_3_reg_320 <= video_in_TLAST;
            end if; 
        end if;
    end process;

    -- eol_reg_237 assign process. --
    eol_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and (exitcond2_reg_493 = ap_const_lv1_0))) then 
                eol_reg_237 <= eol_2_reg_273;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_351_p2 = ap_const_lv1_0))) then 
                eol_reg_237 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    -- p_1_reg_215 assign process. --
    p_1_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_fu_363_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))))) then 
                p_1_reg_215 <= j_V_fu_369_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_351_p2 = ap_const_lv1_0))) then 
                p_1_reg_215 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- p_Val2_s_reg_261 assign process. --
    p_Val2_s_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_120) then
                if (ap_sig_bdd_195) then 
                    p_Val2_s_reg_261 <= axi_data_V_1_phi_fu_207_p4;
                elsif (ap_sig_bdd_107) then 
                    p_Val2_s_reg_261 <= video_in_TDATA;
                elsif ((ap_true = ap_true)) then 
                    p_Val2_s_reg_261 <= ap_reg_phiprechg_p_Val2_s_reg_261pp1_it0;
                end if;
            end if; 
        end if;
    end process;

    -- p_s_reg_169 assign process. --
    p_s_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                p_s_reg_169 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6)) then 
                p_s_reg_169 <= i_V_reg_488;
            end if; 
        end if;
    end process;

    -- res_1_reg_226 assign process. --
    res_1_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and (exitcond2_reg_493 = ap_const_lv1_0))) then 
                res_1_reg_226 <= res_2_reg_506;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_351_p2 = ap_const_lv1_0))) then 
                res_1_reg_226 <= res_reg_180;
            end if; 
        end if;
    end process;

    -- res_3_reg_308 assign process. --
    res_3_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and not((exitcond2_fu_363_p2 = ap_const_lv1_0)))) then 
                res_3_reg_308 <= res_1_phi_fu_229_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_3_reg_320) and not(ap_sig_bdd_140))) then 
                res_3_reg_308 <= res_4_fu_458_p2;
            end if; 
        end if;
    end process;

    -- res_reg_180 assign process. --
    res_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                res_reg_180 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6)) then 
                res_reg_180 <= res_3_reg_308;
            end if; 
        end if;
    end process;

    -- sof_1_fu_106 assign process. --
    sof_1_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_fu_363_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))))) then 
                sof_1_fu_106 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                sof_1_fu_106 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))))) then
                exitcond2_reg_493 <= exitcond2_fu_363_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                i_V_reg_488 <= i_V_fu_357_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_fu_363_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))))) then
                res_2_reg_506 <= res_2_fu_431_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_fu_363_p2 = ap_const_lv1_0) and not((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))))) then
                tmp_5_reg_511 <= tmp_5_fu_439_p1;
                tmp_6_reg_516 <= p_Val2_s_phi_fu_265_p4(15 downto 8);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((video_in_TVALID = ap_const_logic_0)))) then
                tmp_data_V_reg_464 <= video_in_TDATA;
                tmp_last_V_reg_472 <= video_in_TLAST;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, video_in_TVALID, exitcond1_fu_351_p2, exitcond2_fu_363_p2, ap_sig_bdd_108, ap_reg_ppiten_pp1_it0, ap_sig_bdd_140, eol_3_reg_320, tmp_user_V_fu_342_p1, ap_sig_bdd_324)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_324)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((not((video_in_TVALID = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_user_V_fu_342_p1))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif ((not((video_in_TVALID = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_user_V_fu_342_p1)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((exitcond1_fu_351_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                end if;
            when ap_ST_pp1_stg0_fsm_4 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and not((exitcond2_fu_363_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and not((exitcond2_fu_363_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                end if;
            when ap_ST_st7_fsm_5 => 
                if (((ap_const_lv1_0 = eol_3_reg_320) and not(ap_sig_bdd_140))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                elsif ((not(ap_sig_bdd_140) and not((ap_const_lv1_0 = eol_3_reg_320)))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                end if;
            when ap_ST_st8_fsm_6 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    AXI_video_strm_V_data_V_2 <= res_reg_180;

    -- AXI_video_strm_V_data_V_2_ap_vld assign process. --
    AXI_video_strm_V_data_V_2_ap_vld_assign_proc : process(exitcond1_fu_351_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond1_fu_351_p2 = ap_const_lv1_0)))) then 
            AXI_video_strm_V_data_V_2_ap_vld <= ap_const_logic_1;
        else 
            AXI_video_strm_V_data_V_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, exitcond1_fu_351_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond1_fu_351_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(exitcond1_fu_351_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond1_fu_351_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_phiprechg_axi_last_V_2_reg_249pp1_it0 <= "X";
    ap_reg_phiprechg_eol_2_reg_273pp1_it0 <= "X";
    ap_reg_phiprechg_p_Val2_s_reg_261pp1_it0 <= "XXXXXXXXXXXXXXXX";

    -- ap_sig_bdd_100 assign process. --
    ap_sig_bdd_100_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_100 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_107 assign process. --
    ap_sig_bdd_107_assign_proc : process(exitcond2_fu_363_p2, brmerge_fu_378_p2)
    begin
                ap_sig_bdd_107 <= ((exitcond2_fu_363_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = brmerge_fu_378_p2));
    end process;


    -- ap_sig_bdd_108 assign process. --
    ap_sig_bdd_108_assign_proc : process(video_in_TVALID, exitcond2_fu_363_p2, brmerge_fu_378_p2)
    begin
                ap_sig_bdd_108 <= ((video_in_TVALID = ap_const_logic_0) and (exitcond2_fu_363_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = brmerge_fu_378_p2));
    end process;


    -- ap_sig_bdd_120 assign process. --
    ap_sig_bdd_120_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_sig_bdd_108, ap_reg_ppiten_pp1_it0)
    begin
                ap_sig_bdd_120 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))));
    end process;


    -- ap_sig_bdd_135 assign process. --
    ap_sig_bdd_135_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_135 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_140 assign process. --
    ap_sig_bdd_140_assign_proc : process(video_in_TVALID, eol_3_reg_320)
    begin
                ap_sig_bdd_140 <= ((video_in_TVALID = ap_const_logic_0) and (ap_const_lv1_0 = eol_3_reg_320));
    end process;


    -- ap_sig_bdd_160 assign process. --
    ap_sig_bdd_160_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_160 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_167 assign process. --
    ap_sig_bdd_167_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_167 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_195 assign process. --
    ap_sig_bdd_195_assign_proc : process(exitcond2_fu_363_p2, brmerge_fu_378_p2)
    begin
                ap_sig_bdd_195 <= ((exitcond2_fu_363_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = brmerge_fu_378_p2)));
    end process;


    -- ap_sig_bdd_211 assign process. --
    ap_sig_bdd_211_assign_proc : process(exitcond2_fu_363_p2, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it0)
    begin
                ap_sig_bdd_211 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_fu_363_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0));
    end process;


    -- ap_sig_bdd_26 assign process. --
    ap_sig_bdd_26_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_26 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_324 assign process. --
    ap_sig_bdd_324_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_324 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_75 assign process. --
    ap_sig_bdd_75_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_75 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_89 assign process. --
    ap_sig_bdd_89_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_89 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_4 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_4_assign_proc : process(ap_sig_bdd_100)
    begin
        if (ap_sig_bdd_100) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_26)
    begin
        if (ap_sig_bdd_26) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_75)
    begin
        if (ap_sig_bdd_75) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_167)
    begin
        if (ap_sig_bdd_167) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_89)
    begin
        if (ap_sig_bdd_89) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_5 assign process. --
    ap_sig_cseq_ST_st7_fsm_5_assign_proc : process(ap_sig_bdd_135)
    begin
        if (ap_sig_bdd_135) then 
            ap_sig_cseq_ST_st7_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_6 assign process. --
    ap_sig_cseq_ST_st8_fsm_6_assign_proc : process(ap_sig_bdd_160)
    begin
        if (ap_sig_bdd_160) then 
            ap_sig_cseq_ST_st8_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- axi_data_V_1_phi_fu_207_p4 assign process. --
    axi_data_V_1_phi_fu_207_p4_assign_proc : process(axi_data_V_1_reg_204, p_Val2_s_reg_261, exitcond2_reg_493, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (exitcond2_reg_493 = ap_const_lv1_0))) then 
            axi_data_V_1_phi_fu_207_p4 <= p_Val2_s_reg_261;
        else 
            axi_data_V_1_phi_fu_207_p4 <= axi_data_V_1_reg_204;
        end if; 
    end process;

    axi_last_V_1_mux_fu_390_p2 <= (eol_1_phi_fu_196_p4 or not_sof_2_fu_384_p2);
    brmerge_fu_378_p2 <= (sof_1_fu_106 or eol_phi_fu_241_p4);

    -- eol_1_phi_fu_196_p4 assign process. --
    eol_1_phi_fu_196_p4_assign_proc : process(eol_1_reg_193, axi_last_V_2_reg_249, exitcond2_reg_493, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (exitcond2_reg_493 = ap_const_lv1_0))) then 
            eol_1_phi_fu_196_p4 <= axi_last_V_2_reg_249;
        else 
            eol_1_phi_fu_196_p4 <= eol_1_reg_193;
        end if; 
    end process;


    -- eol_2_phi_fu_277_p4 assign process. --
    eol_2_phi_fu_277_p4_assign_proc : process(video_in_TLAST, brmerge_fu_378_p2, ap_reg_phiprechg_eol_2_reg_273pp1_it0, axi_last_V_1_mux_fu_390_p2, ap_sig_bdd_211)
    begin
        if (ap_sig_bdd_211) then
            if (not((ap_const_lv1_0 = brmerge_fu_378_p2))) then 
                eol_2_phi_fu_277_p4 <= axi_last_V_1_mux_fu_390_p2;
            elsif ((ap_const_lv1_0 = brmerge_fu_378_p2)) then 
                eol_2_phi_fu_277_p4 <= video_in_TLAST;
            else 
                eol_2_phi_fu_277_p4 <= ap_reg_phiprechg_eol_2_reg_273pp1_it0;
            end if;
        else 
            eol_2_phi_fu_277_p4 <= ap_reg_phiprechg_eol_2_reg_273pp1_it0;
        end if; 
    end process;


    -- eol_phi_fu_241_p4 assign process. --
    eol_phi_fu_241_p4_assign_proc : process(eol_reg_237, eol_2_reg_273, exitcond2_reg_493, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (exitcond2_reg_493 = ap_const_lv1_0))) then 
            eol_phi_fu_241_p4 <= eol_2_reg_273;
        else 
            eol_phi_fu_241_p4 <= eol_reg_237;
        end if; 
    end process;

    exitcond1_fu_351_p2 <= "1" when (p_s_reg_169 = ap_const_lv10_280) else "0";
    exitcond2_fu_363_p2 <= "1" when (p_1_reg_215 = ap_const_lv9_1E0) else "0";
    i_V_fu_357_p2 <= std_logic_vector(unsigned(p_s_reg_169) + unsigned(ap_const_lv10_1));

    -- img_data_stream_0_V_ap_vld assign process. --
    img_data_stream_0_V_ap_vld_assign_proc : process(exitcond2_reg_493, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_sig_bdd_108, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and (exitcond2_reg_493 = ap_const_lv1_0))) then 
            img_data_stream_0_V_ap_vld <= ap_const_logic_1;
        else 
            img_data_stream_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_data_stream_0_V_din <= tmp_5_reg_511;
    img_data_stream_0_V_write <= ap_const_logic_0;

    -- img_data_stream_1_V_ap_vld assign process. --
    img_data_stream_1_V_ap_vld_assign_proc : process(exitcond2_reg_493, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_sig_bdd_108, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and (exitcond2_reg_493 = ap_const_lv1_0))) then 
            img_data_stream_1_V_ap_vld <= ap_const_logic_1;
        else 
            img_data_stream_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_data_stream_1_V_din <= tmp_6_reg_516;
    img_data_stream_1_V_write <= ap_const_logic_0;
    j_V_fu_369_p2 <= std_logic_vector(unsigned(p_1_reg_215) + unsigned(ap_const_lv9_1));
    not_sof_2_fu_384_p2 <= (sof_1_fu_106 xor ap_const_lv1_1);
    not_tmp_6_fu_397_p2 <= "0" when (p_1_reg_215 = ap_const_lv9_1DF) else "1";

    -- p_Val2_s_phi_fu_265_p4 assign process. --
    p_Val2_s_phi_fu_265_p4_assign_proc : process(video_in_TDATA, brmerge_fu_378_p2, axi_data_V_1_phi_fu_207_p4, ap_reg_phiprechg_p_Val2_s_reg_261pp1_it0, ap_sig_bdd_211)
    begin
        if (ap_sig_bdd_211) then
            if (not((ap_const_lv1_0 = brmerge_fu_378_p2))) then 
                p_Val2_s_phi_fu_265_p4 <= axi_data_V_1_phi_fu_207_p4;
            elsif ((ap_const_lv1_0 = brmerge_fu_378_p2)) then 
                p_Val2_s_phi_fu_265_p4 <= video_in_TDATA;
            else 
                p_Val2_s_phi_fu_265_p4 <= ap_reg_phiprechg_p_Val2_s_reg_261pp1_it0;
            end if;
        else 
            p_Val2_s_phi_fu_265_p4 <= ap_reg_phiprechg_p_Val2_s_reg_261pp1_it0;
        end if; 
    end process;


    -- res_1_phi_fu_229_p4 assign process. --
    res_1_phi_fu_229_p4_assign_proc : process(res_1_reg_226, exitcond2_reg_493, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it1, res_2_reg_506)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (exitcond2_reg_493 = ap_const_lv1_0))) then 
            res_1_phi_fu_229_p4 <= res_2_reg_506;
        else 
            res_1_phi_fu_229_p4 <= res_1_reg_226;
        end if; 
    end process;

    res_1_s_fu_423_p3 <= (tmp_9_fu_413_p4 & tmp_8_fu_407_p2);
    res_2_fu_431_p3 <= 
        res_1_s_fu_423_p3 when (eol_2_phi_fu_277_p4(0) = '1') else 
        res_1_phi_fu_229_p4;
    res_4_fu_458_p2 <= (res_3_reg_308 or ap_const_lv32_2);
    tmp_4_fu_403_p1 <= res_1_phi_fu_229_p4(1 - 1 downto 0);
    tmp_5_fu_439_p1 <= p_Val2_s_phi_fu_265_p4(8 - 1 downto 0);
    tmp_8_fu_407_p2 <= (tmp_4_fu_403_p1 or not_tmp_6_fu_397_p2);
    tmp_9_fu_413_p4 <= res_1_phi_fu_229_p4(31 downto 1);
    tmp_user_V_fu_342_p1 <= video_in_TUSER;

    -- video_in_TREADY assign process. --
    video_in_TREADY_assign_proc : process(video_in_TVALID, ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_363_p2, ap_sig_cseq_ST_pp1_stg0_fsm_4, brmerge_fu_378_p2, ap_sig_bdd_108, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_st7_fsm_5, ap_sig_bdd_140, eol_3_reg_320)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((video_in_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_3_reg_320) and not(ap_sig_bdd_140)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_fu_363_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = brmerge_fu_378_p2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)))))) then 
            video_in_TREADY <= ap_const_logic_1;
        else 
            video_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;

end behav;
