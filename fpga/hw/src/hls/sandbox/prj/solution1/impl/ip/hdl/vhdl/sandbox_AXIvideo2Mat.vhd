-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sandbox_AXIvideo2Mat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    AXI_video_strm_V_data_V_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AXI_video_strm_V_data_V_2_ap_vld : OUT STD_LOGIC;
    video_in_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    video_in_TVALID : IN STD_LOGIC;
    video_in_TREADY : OUT STD_LOGIC;
    video_in_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    video_in_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    video_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_0_V_full_n : IN STD_LOGIC;
    img_data_stream_0_V_write : OUT STD_LOGIC;
    img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_1_V_full_n : IN STD_LOGIC;
    img_data_stream_1_V_write : OUT STD_LOGIC;
    img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_2_V_full_n : IN STD_LOGIC;
    img_data_stream_2_V_write : OUT STD_LOGIC;
    img_data_stream_0_V_ap_vld : OUT STD_LOGIC;
    img_data_stream_1_V_ap_vld : OUT STD_LOGIC;
    img_data_stream_2_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of sandbox_AXIvideo2Mat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_pp1_stg0_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_st7_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st8_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_780 : STD_LOGIC_VECTOR (10 downto 0) := "11110000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_438 : STD_LOGIC_VECTOR (10 downto 0) := "10000111000";
    constant ap_const_lv11_437 : STD_LOGIC_VECTOR (10 downto 0) := "10000110111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_true : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_26 : BOOLEAN;
    signal eol_1_reg_206 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_1_reg_217 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_1_reg_228 : STD_LOGIC_VECTOR (10 downto 0);
    signal res_1_reg_239 : STD_LOGIC_VECTOR (31 downto 0);
    signal eol_reg_250 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_2_reg_262 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_reg_274 : STD_LOGIC_VECTOR (23 downto 0);
    signal eol_2_reg_286 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_reg_487 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_79 : BOOLEAN;
    signal tmp_last_V_reg_495 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_93 : BOOLEAN;
    signal i_V_fu_370_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_V_reg_511 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond2_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_516 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_104 : BOOLEAN;
    signal brmerge_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_112 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal j_V_fu_382_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal res_2_fu_444_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_2_reg_529 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_452_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_534 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_539 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_reg_544 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_141 : BOOLEAN;
    signal ap_sig_bdd_146 : BOOLEAN;
    signal res_4_fu_481_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_last_V_3_reg_297 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V1_reg_162 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_166 : BOOLEAN;
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_173 : BOOLEAN;
    signal axi_data_V_3_reg_309 : STD_LOGIC_VECTOR (23 downto 0);
    signal axi_data_V1_reg_172 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_s_reg_182 : STD_LOGIC_VECTOR (10 downto 0);
    signal res_3_reg_321 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_reg_193 : STD_LOGIC_VECTOR (31 downto 0);
    signal eol_1_phi_fu_209_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_1_phi_fu_220_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal res_1_phi_fu_242_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal eol_phi_fu_254_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_phiprechg_axi_last_V_2_reg_262pp1_it0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_phiprechg_p_Val2_s_reg_274pp1_it0 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_s_phi_fu_278_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_reg_phiprechg_eol_2_reg_286pp1_it0 : STD_LOGIC_VECTOR (0 downto 0);
    signal eol_2_phi_fu_290_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_1_mux_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal eol_3_reg_333 : STD_LOGIC_VECTOR (0 downto 0);
    signal sof_1_fu_112 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_sof_2_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_416_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_6_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_426_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_8_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_1_s_fu_436_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_user_V_fu_355_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_bdd_335 : BOOLEAN;
    signal ap_sig_bdd_111 : BOOLEAN;
    signal ap_sig_bdd_200 : BOOLEAN;
    signal ap_sig_bdd_124 : BOOLEAN;
    signal ap_sig_bdd_216 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond1_fu_364_p2 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and not((exitcond2_fu_376_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_364_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_fu_376_p2 = ap_const_lv1_0) and not((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_364_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and not((exitcond2_fu_376_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- axi_data_V1_reg_172 assign process. --
    axi_data_V1_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                axi_data_V1_reg_172 <= tmp_data_V_reg_487;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6)) then 
                axi_data_V1_reg_172 <= axi_data_V_3_reg_309;
            end if; 
        end if;
    end process;

    -- axi_data_V_1_reg_217 assign process. --
    axi_data_V_1_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and (exitcond2_reg_516 = ap_const_lv1_0))) then 
                axi_data_V_1_reg_217 <= p_Val2_s_reg_274;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_364_p2 = ap_const_lv1_0))) then 
                axi_data_V_1_reg_217 <= axi_data_V1_reg_172;
            end if; 
        end if;
    end process;

    -- axi_data_V_3_reg_309 assign process. --
    axi_data_V_3_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and not((exitcond2_fu_376_p2 = ap_const_lv1_0)))) then 
                axi_data_V_3_reg_309 <= axi_data_V_1_phi_fu_220_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_3_reg_333) and not(ap_sig_bdd_146))) then 
                axi_data_V_3_reg_309 <= video_in_TDATA;
            end if; 
        end if;
    end process;

    -- axi_last_V1_reg_162 assign process. --
    axi_last_V1_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                axi_last_V1_reg_162 <= tmp_last_V_reg_495;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6)) then 
                axi_last_V1_reg_162 <= axi_last_V_3_reg_297;
            end if; 
        end if;
    end process;

    -- axi_last_V_2_reg_262 assign process. --
    axi_last_V_2_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_124) then
                if (ap_sig_bdd_200) then 
                    axi_last_V_2_reg_262 <= eol_1_phi_fu_209_p4;
                elsif (ap_sig_bdd_111) then 
                    axi_last_V_2_reg_262 <= video_in_TLAST;
                elsif ((ap_true = ap_true)) then 
                    axi_last_V_2_reg_262 <= ap_reg_phiprechg_axi_last_V_2_reg_262pp1_it0;
                end if;
            end if; 
        end if;
    end process;

    -- axi_last_V_3_reg_297 assign process. --
    axi_last_V_3_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and not((exitcond2_fu_376_p2 = ap_const_lv1_0)))) then 
                axi_last_V_3_reg_297 <= eol_1_phi_fu_209_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_3_reg_333) and not(ap_sig_bdd_146))) then 
                axi_last_V_3_reg_297 <= video_in_TLAST;
            end if; 
        end if;
    end process;

    -- eol_1_reg_206 assign process. --
    eol_1_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and (exitcond2_reg_516 = ap_const_lv1_0))) then 
                eol_1_reg_206 <= axi_last_V_2_reg_262;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_364_p2 = ap_const_lv1_0))) then 
                eol_1_reg_206 <= axi_last_V1_reg_162;
            end if; 
        end if;
    end process;

    -- eol_2_reg_286 assign process. --
    eol_2_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_124) then
                if (ap_sig_bdd_200) then 
                    eol_2_reg_286 <= axi_last_V_1_mux_fu_403_p2;
                elsif (ap_sig_bdd_111) then 
                    eol_2_reg_286 <= video_in_TLAST;
                elsif ((ap_true = ap_true)) then 
                    eol_2_reg_286 <= ap_reg_phiprechg_eol_2_reg_286pp1_it0;
                end if;
            end if; 
        end if;
    end process;

    -- eol_3_reg_333 assign process. --
    eol_3_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and not((exitcond2_fu_376_p2 = ap_const_lv1_0)))) then 
                eol_3_reg_333 <= eol_phi_fu_254_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_3_reg_333) and not(ap_sig_bdd_146))) then 
                eol_3_reg_333 <= video_in_TLAST;
            end if; 
        end if;
    end process;

    -- eol_reg_250 assign process. --
    eol_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and (exitcond2_reg_516 = ap_const_lv1_0))) then 
                eol_reg_250 <= eol_2_reg_286;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_364_p2 = ap_const_lv1_0))) then 
                eol_reg_250 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    -- p_1_reg_228 assign process. --
    p_1_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_fu_376_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))))) then 
                p_1_reg_228 <= j_V_fu_382_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_364_p2 = ap_const_lv1_0))) then 
                p_1_reg_228 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- p_Val2_s_reg_274 assign process. --
    p_Val2_s_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_124) then
                if (ap_sig_bdd_200) then 
                    p_Val2_s_reg_274 <= axi_data_V_1_phi_fu_220_p4;
                elsif (ap_sig_bdd_111) then 
                    p_Val2_s_reg_274 <= video_in_TDATA;
                elsif ((ap_true = ap_true)) then 
                    p_Val2_s_reg_274 <= ap_reg_phiprechg_p_Val2_s_reg_274pp1_it0;
                end if;
            end if; 
        end if;
    end process;

    -- p_s_reg_182 assign process. --
    p_s_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                p_s_reg_182 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6)) then 
                p_s_reg_182 <= i_V_reg_511;
            end if; 
        end if;
    end process;

    -- res_1_reg_239 assign process. --
    res_1_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and (exitcond2_reg_516 = ap_const_lv1_0))) then 
                res_1_reg_239 <= res_2_reg_529;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_364_p2 = ap_const_lv1_0))) then 
                res_1_reg_239 <= res_reg_193;
            end if; 
        end if;
    end process;

    -- res_3_reg_321 assign process. --
    res_3_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and not((exitcond2_fu_376_p2 = ap_const_lv1_0)))) then 
                res_3_reg_321 <= res_1_phi_fu_242_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_3_reg_333) and not(ap_sig_bdd_146))) then 
                res_3_reg_321 <= res_4_fu_481_p2;
            end if; 
        end if;
    end process;

    -- res_reg_193 assign process. --
    res_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                res_reg_193 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6)) then 
                res_reg_193 <= res_3_reg_321;
            end if; 
        end if;
    end process;

    -- sof_1_fu_112 assign process. --
    sof_1_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_fu_376_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))))) then 
                sof_1_fu_112 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                sof_1_fu_112 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))))) then
                exitcond2_reg_516 <= exitcond2_fu_376_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                i_V_reg_511 <= i_V_fu_370_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_fu_376_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))))) then
                res_2_reg_529 <= res_2_fu_444_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_fu_376_p2 = ap_const_lv1_0) and not((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))))) then
                tmp_6_reg_534 <= tmp_6_fu_452_p1;
                tmp_7_reg_539 <= p_Val2_s_phi_fu_278_p4(15 downto 8);
                tmp_9_reg_544 <= p_Val2_s_phi_fu_278_p4(23 downto 16);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((video_in_TVALID = ap_const_logic_0)))) then
                tmp_data_V_reg_487 <= video_in_TDATA;
                tmp_last_V_reg_495 <= video_in_TLAST;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, video_in_TVALID, exitcond1_fu_364_p2, exitcond2_fu_376_p2, ap_sig_bdd_112, ap_reg_ppiten_pp1_it0, ap_sig_bdd_146, eol_3_reg_333, tmp_user_V_fu_355_p1, ap_sig_bdd_335)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_335)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((not((video_in_TVALID = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_user_V_fu_355_p1))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif ((not((video_in_TVALID = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_user_V_fu_355_p1)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((exitcond1_fu_364_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                end if;
            when ap_ST_pp1_stg0_fsm_4 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and not((exitcond2_fu_376_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and not((exitcond2_fu_376_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                end if;
            when ap_ST_st7_fsm_5 => 
                if (((ap_const_lv1_0 = eol_3_reg_333) and not(ap_sig_bdd_146))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                elsif ((not(ap_sig_bdd_146) and not((ap_const_lv1_0 = eol_3_reg_333)))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                end if;
            when ap_ST_st8_fsm_6 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    AXI_video_strm_V_data_V_2 <= res_reg_193;

    -- AXI_video_strm_V_data_V_2_ap_vld assign process. --
    AXI_video_strm_V_data_V_2_ap_vld_assign_proc : process(exitcond1_fu_364_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond1_fu_364_p2 = ap_const_lv1_0)))) then 
            AXI_video_strm_V_data_V_2_ap_vld <= ap_const_logic_1;
        else 
            AXI_video_strm_V_data_V_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, exitcond1_fu_364_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond1_fu_364_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(exitcond1_fu_364_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond1_fu_364_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_phiprechg_axi_last_V_2_reg_262pp1_it0 <= "X";
    ap_reg_phiprechg_eol_2_reg_286pp1_it0 <= "X";
    ap_reg_phiprechg_p_Val2_s_reg_274pp1_it0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";

    -- ap_sig_bdd_104 assign process. --
    ap_sig_bdd_104_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_104 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_111 assign process. --
    ap_sig_bdd_111_assign_proc : process(exitcond2_fu_376_p2, brmerge_fu_391_p2)
    begin
                ap_sig_bdd_111 <= ((exitcond2_fu_376_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = brmerge_fu_391_p2));
    end process;


    -- ap_sig_bdd_112 assign process. --
    ap_sig_bdd_112_assign_proc : process(video_in_TVALID, exitcond2_fu_376_p2, brmerge_fu_391_p2)
    begin
                ap_sig_bdd_112 <= ((video_in_TVALID = ap_const_logic_0) and (exitcond2_fu_376_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = brmerge_fu_391_p2));
    end process;


    -- ap_sig_bdd_124 assign process. --
    ap_sig_bdd_124_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_sig_bdd_112, ap_reg_ppiten_pp1_it0)
    begin
                ap_sig_bdd_124 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))));
    end process;


    -- ap_sig_bdd_141 assign process. --
    ap_sig_bdd_141_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_141 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_146 assign process. --
    ap_sig_bdd_146_assign_proc : process(video_in_TVALID, eol_3_reg_333)
    begin
                ap_sig_bdd_146 <= ((video_in_TVALID = ap_const_logic_0) and (ap_const_lv1_0 = eol_3_reg_333));
    end process;


    -- ap_sig_bdd_166 assign process. --
    ap_sig_bdd_166_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_166 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_173 assign process. --
    ap_sig_bdd_173_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_173 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_200 assign process. --
    ap_sig_bdd_200_assign_proc : process(exitcond2_fu_376_p2, brmerge_fu_391_p2)
    begin
                ap_sig_bdd_200 <= ((exitcond2_fu_376_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = brmerge_fu_391_p2)));
    end process;


    -- ap_sig_bdd_216 assign process. --
    ap_sig_bdd_216_assign_proc : process(exitcond2_fu_376_p2, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it0)
    begin
                ap_sig_bdd_216 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_fu_376_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0));
    end process;


    -- ap_sig_bdd_26 assign process. --
    ap_sig_bdd_26_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_26 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_335 assign process. --
    ap_sig_bdd_335_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_335 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_79 assign process. --
    ap_sig_bdd_79_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_79 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_93 assign process. --
    ap_sig_bdd_93_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_93 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_4 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_4_assign_proc : process(ap_sig_bdd_104)
    begin
        if (ap_sig_bdd_104) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_26)
    begin
        if (ap_sig_bdd_26) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_79)
    begin
        if (ap_sig_bdd_79) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_173)
    begin
        if (ap_sig_bdd_173) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_93)
    begin
        if (ap_sig_bdd_93) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_5 assign process. --
    ap_sig_cseq_ST_st7_fsm_5_assign_proc : process(ap_sig_bdd_141)
    begin
        if (ap_sig_bdd_141) then 
            ap_sig_cseq_ST_st7_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_6 assign process. --
    ap_sig_cseq_ST_st8_fsm_6_assign_proc : process(ap_sig_bdd_166)
    begin
        if (ap_sig_bdd_166) then 
            ap_sig_cseq_ST_st8_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- axi_data_V_1_phi_fu_220_p4 assign process. --
    axi_data_V_1_phi_fu_220_p4_assign_proc : process(axi_data_V_1_reg_217, p_Val2_s_reg_274, exitcond2_reg_516, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (exitcond2_reg_516 = ap_const_lv1_0))) then 
            axi_data_V_1_phi_fu_220_p4 <= p_Val2_s_reg_274;
        else 
            axi_data_V_1_phi_fu_220_p4 <= axi_data_V_1_reg_217;
        end if; 
    end process;

    axi_last_V_1_mux_fu_403_p2 <= (eol_1_phi_fu_209_p4 or not_sof_2_fu_397_p2);
    brmerge_fu_391_p2 <= (sof_1_fu_112 or eol_phi_fu_254_p4);

    -- eol_1_phi_fu_209_p4 assign process. --
    eol_1_phi_fu_209_p4_assign_proc : process(eol_1_reg_206, axi_last_V_2_reg_262, exitcond2_reg_516, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (exitcond2_reg_516 = ap_const_lv1_0))) then 
            eol_1_phi_fu_209_p4 <= axi_last_V_2_reg_262;
        else 
            eol_1_phi_fu_209_p4 <= eol_1_reg_206;
        end if; 
    end process;


    -- eol_2_phi_fu_290_p4 assign process. --
    eol_2_phi_fu_290_p4_assign_proc : process(video_in_TLAST, brmerge_fu_391_p2, ap_reg_phiprechg_eol_2_reg_286pp1_it0, axi_last_V_1_mux_fu_403_p2, ap_sig_bdd_216)
    begin
        if (ap_sig_bdd_216) then
            if (not((ap_const_lv1_0 = brmerge_fu_391_p2))) then 
                eol_2_phi_fu_290_p4 <= axi_last_V_1_mux_fu_403_p2;
            elsif ((ap_const_lv1_0 = brmerge_fu_391_p2)) then 
                eol_2_phi_fu_290_p4 <= video_in_TLAST;
            else 
                eol_2_phi_fu_290_p4 <= ap_reg_phiprechg_eol_2_reg_286pp1_it0;
            end if;
        else 
            eol_2_phi_fu_290_p4 <= ap_reg_phiprechg_eol_2_reg_286pp1_it0;
        end if; 
    end process;


    -- eol_phi_fu_254_p4 assign process. --
    eol_phi_fu_254_p4_assign_proc : process(eol_reg_250, eol_2_reg_286, exitcond2_reg_516, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (exitcond2_reg_516 = ap_const_lv1_0))) then 
            eol_phi_fu_254_p4 <= eol_2_reg_286;
        else 
            eol_phi_fu_254_p4 <= eol_reg_250;
        end if; 
    end process;

    exitcond1_fu_364_p2 <= "1" when (p_s_reg_182 = ap_const_lv11_780) else "0";
    exitcond2_fu_376_p2 <= "1" when (p_1_reg_228 = ap_const_lv11_438) else "0";
    i_V_fu_370_p2 <= std_logic_vector(unsigned(p_s_reg_182) + unsigned(ap_const_lv11_1));

    -- img_data_stream_0_V_ap_vld assign process. --
    img_data_stream_0_V_ap_vld_assign_proc : process(exitcond2_reg_516, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_sig_bdd_112, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and (exitcond2_reg_516 = ap_const_lv1_0))) then 
            img_data_stream_0_V_ap_vld <= ap_const_logic_1;
        else 
            img_data_stream_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_data_stream_0_V_din <= tmp_6_reg_534;
    img_data_stream_0_V_write <= ap_const_logic_0;

    -- img_data_stream_1_V_ap_vld assign process. --
    img_data_stream_1_V_ap_vld_assign_proc : process(exitcond2_reg_516, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_sig_bdd_112, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and (exitcond2_reg_516 = ap_const_lv1_0))) then 
            img_data_stream_1_V_ap_vld <= ap_const_logic_1;
        else 
            img_data_stream_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_data_stream_1_V_din <= tmp_7_reg_539;
    img_data_stream_1_V_write <= ap_const_logic_0;

    -- img_data_stream_2_V_ap_vld assign process. --
    img_data_stream_2_V_ap_vld_assign_proc : process(exitcond2_reg_516, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_sig_bdd_112, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) and (exitcond2_reg_516 = ap_const_lv1_0))) then 
            img_data_stream_2_V_ap_vld <= ap_const_logic_1;
        else 
            img_data_stream_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_data_stream_2_V_din <= tmp_9_reg_544;
    img_data_stream_2_V_write <= ap_const_logic_0;
    j_V_fu_382_p2 <= std_logic_vector(unsigned(p_1_reg_228) + unsigned(ap_const_lv11_1));
    not_sof_2_fu_397_p2 <= (sof_1_fu_112 xor ap_const_lv1_1);
    not_tmp_6_fu_410_p2 <= "0" when (p_1_reg_228 = ap_const_lv11_437) else "1";

    -- p_Val2_s_phi_fu_278_p4 assign process. --
    p_Val2_s_phi_fu_278_p4_assign_proc : process(video_in_TDATA, brmerge_fu_391_p2, axi_data_V_1_phi_fu_220_p4, ap_reg_phiprechg_p_Val2_s_reg_274pp1_it0, ap_sig_bdd_216)
    begin
        if (ap_sig_bdd_216) then
            if (not((ap_const_lv1_0 = brmerge_fu_391_p2))) then 
                p_Val2_s_phi_fu_278_p4 <= axi_data_V_1_phi_fu_220_p4;
            elsif ((ap_const_lv1_0 = brmerge_fu_391_p2)) then 
                p_Val2_s_phi_fu_278_p4 <= video_in_TDATA;
            else 
                p_Val2_s_phi_fu_278_p4 <= ap_reg_phiprechg_p_Val2_s_reg_274pp1_it0;
            end if;
        else 
            p_Val2_s_phi_fu_278_p4 <= ap_reg_phiprechg_p_Val2_s_reg_274pp1_it0;
        end if; 
    end process;


    -- res_1_phi_fu_242_p4 assign process. --
    res_1_phi_fu_242_p4_assign_proc : process(res_1_reg_239, exitcond2_reg_516, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it1, res_2_reg_529)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (exitcond2_reg_516 = ap_const_lv1_0))) then 
            res_1_phi_fu_242_p4 <= res_2_reg_529;
        else 
            res_1_phi_fu_242_p4 <= res_1_reg_239;
        end if; 
    end process;

    res_1_s_fu_436_p3 <= (tmp_5_fu_426_p4 & tmp_8_fu_420_p2);
    res_2_fu_444_p3 <= 
        res_1_s_fu_436_p3 when (eol_2_phi_fu_290_p4(0) = '1') else 
        res_1_phi_fu_242_p4;
    res_4_fu_481_p2 <= (res_3_reg_321 or ap_const_lv32_2);
    tmp_4_fu_416_p1 <= res_1_phi_fu_242_p4(1 - 1 downto 0);
    tmp_5_fu_426_p4 <= res_1_phi_fu_242_p4(31 downto 1);
    tmp_6_fu_452_p1 <= p_Val2_s_phi_fu_278_p4(8 - 1 downto 0);
    tmp_8_fu_420_p2 <= (tmp_4_fu_416_p1 or not_tmp_6_fu_410_p2);
    tmp_user_V_fu_355_p1 <= video_in_TUSER;

    -- video_in_TREADY assign process. --
    video_in_TREADY_assign_proc : process(video_in_TVALID, ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_376_p2, ap_sig_cseq_ST_pp1_stg0_fsm_4, brmerge_fu_391_p2, ap_sig_bdd_112, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_st7_fsm_5, ap_sig_bdd_146, eol_3_reg_333)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((video_in_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_3_reg_333) and not(ap_sig_bdd_146)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_fu_376_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = brmerge_fu_391_p2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)))))) then 
            video_in_TREADY <= ap_const_logic_1;
        else 
            video_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;

end behav;
