// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _sandbox_HH_
#define _sandbox_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "sandbox_AXIvideo2Mat_16_640_480_16_s.h"
#include "sandbox_Block_proc.h"
#include "FIFO_sandbox_result_channel.h"
#include "sandbox_CONTROL_BUS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32>
struct sandbox : public sc_module {
    // Port declarations 38
    sc_in< sc_logic > s_axi_CONTROL_BUS_AWVALID;
    sc_out< sc_logic > s_axi_CONTROL_BUS_AWREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_ADDR_WIDTH> > s_axi_CONTROL_BUS_AWADDR;
    sc_in< sc_logic > s_axi_CONTROL_BUS_WVALID;
    sc_out< sc_logic > s_axi_CONTROL_BUS_WREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_DATA_WIDTH> > s_axi_CONTROL_BUS_WDATA;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_DATA_WIDTH/8> > s_axi_CONTROL_BUS_WSTRB;
    sc_in< sc_logic > s_axi_CONTROL_BUS_ARVALID;
    sc_out< sc_logic > s_axi_CONTROL_BUS_ARREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_ADDR_WIDTH> > s_axi_CONTROL_BUS_ARADDR;
    sc_out< sc_logic > s_axi_CONTROL_BUS_RVALID;
    sc_in< sc_logic > s_axi_CONTROL_BUS_RREADY;
    sc_out< sc_uint<C_S_AXI_CONTROL_BUS_DATA_WIDTH> > s_axi_CONTROL_BUS_RDATA;
    sc_out< sc_lv<2> > s_axi_CONTROL_BUS_RRESP;
    sc_out< sc_logic > s_axi_CONTROL_BUS_BVALID;
    sc_in< sc_logic > s_axi_CONTROL_BUS_BREADY;
    sc_out< sc_lv<2> > s_axi_CONTROL_BUS_BRESP;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > interrupt;
    sc_in< sc_lv<16> > video_in_TDATA;
    sc_in< sc_lv<2> > video_in_TKEEP;
    sc_in< sc_lv<2> > video_in_TSTRB;
    sc_in< sc_lv<1> > video_in_TUSER;
    sc_in< sc_lv<1> > video_in_TLAST;
    sc_in< sc_lv<1> > video_in_TID;
    sc_in< sc_lv<1> > video_in_TDEST;
    sc_out< sc_lv<16> > video_out_TDATA;
    sc_out< sc_lv<2> > video_out_TKEEP;
    sc_out< sc_lv<2> > video_out_TSTRB;
    sc_out< sc_lv<1> > video_out_TUSER;
    sc_out< sc_lv<1> > video_out_TLAST;
    sc_out< sc_lv<1> > video_out_TID;
    sc_out< sc_lv<1> > video_out_TDEST;
    sc_in< sc_logic > video_in_TVALID;
    sc_out< sc_logic > video_in_TREADY;
    sc_out< sc_logic > video_out_TVALID;
    sc_in< sc_logic > video_out_TREADY;


    // Module declarations
    sandbox(sc_module_name name);
    SC_HAS_PROCESS(sandbox);

    ~sandbox();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sandbox_CONTROL_BUS_s_axi<C_S_AXI_CONTROL_BUS_ADDR_WIDTH,C_S_AXI_CONTROL_BUS_DATA_WIDTH>* sandbox_CONTROL_BUS_s_axi_U;
    sandbox_AXIvideo2Mat_16_640_480_16_s* sandbox_AXIvideo2Mat_16_640_480_16_U0;
    sandbox_Block_proc* sandbox_Block_proc_U0;
    FIFO_sandbox_result_channel* result_channel_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > sandbox_CONTROL_BUS_s_axi_U_ap_dummy_ce;
    sc_signal< sc_lv<32> > rows;
    sc_signal< sc_lv<32> > cols;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_logic > sandbox_AXIvideo2Mat_16_640_480_16_U0_ap_start;
    sc_signal< sc_logic > sandbox_AXIvideo2Mat_16_640_480_16_U0_ap_done;
    sc_signal< sc_logic > sandbox_AXIvideo2Mat_16_640_480_16_U0_ap_continue;
    sc_signal< sc_logic > sandbox_AXIvideo2Mat_16_640_480_16_U0_ap_idle;
    sc_signal< sc_logic > sandbox_AXIvideo2Mat_16_640_480_16_U0_ap_ready;
    sc_signal< sc_lv<32> > sandbox_AXIvideo2Mat_16_640_480_16_U0_AXI_video_strm_V_data_V_2;
    sc_signal< sc_logic > sandbox_AXIvideo2Mat_16_640_480_16_U0_AXI_video_strm_V_data_V_2_ap_vld;
    sc_signal< sc_lv<16> > sandbox_AXIvideo2Mat_16_640_480_16_U0_video_in_TDATA;
    sc_signal< sc_logic > sandbox_AXIvideo2Mat_16_640_480_16_U0_video_in_TVALID;
    sc_signal< sc_logic > sandbox_AXIvideo2Mat_16_640_480_16_U0_video_in_TREADY;
    sc_signal< sc_lv<2> > sandbox_AXIvideo2Mat_16_640_480_16_U0_video_in_TKEEP;
    sc_signal< sc_lv<2> > sandbox_AXIvideo2Mat_16_640_480_16_U0_video_in_TSTRB;
    sc_signal< sc_lv<1> > sandbox_AXIvideo2Mat_16_640_480_16_U0_video_in_TUSER;
    sc_signal< sc_lv<1> > sandbox_AXIvideo2Mat_16_640_480_16_U0_video_in_TLAST;
    sc_signal< sc_lv<1> > sandbox_AXIvideo2Mat_16_640_480_16_U0_video_in_TID;
    sc_signal< sc_lv<1> > sandbox_AXIvideo2Mat_16_640_480_16_U0_video_in_TDEST;
    sc_signal< sc_lv<8> > sandbox_AXIvideo2Mat_16_640_480_16_U0_img_data_stream_0_V_din;
    sc_signal< sc_logic > sandbox_AXIvideo2Mat_16_640_480_16_U0_img_data_stream_0_V_full_n;
    sc_signal< sc_logic > sandbox_AXIvideo2Mat_16_640_480_16_U0_img_data_stream_0_V_write;
    sc_signal< sc_lv<8> > sandbox_AXIvideo2Mat_16_640_480_16_U0_img_data_stream_1_V_din;
    sc_signal< sc_logic > sandbox_AXIvideo2Mat_16_640_480_16_U0_img_data_stream_1_V_full_n;
    sc_signal< sc_logic > sandbox_AXIvideo2Mat_16_640_480_16_U0_img_data_stream_1_V_write;
    sc_signal< sc_logic > sandbox_AXIvideo2Mat_16_640_480_16_U0_img_data_stream_0_V_ap_vld;
    sc_signal< sc_logic > sandbox_AXIvideo2Mat_16_640_480_16_U0_img_data_stream_1_V_ap_vld;
    sc_signal< sc_logic > ap_chn_write_sandbox_AXIvideo2Mat_16_640_480_16_U0_result_channel;
    sc_signal< sc_logic > result_channel_full_n;
    sc_signal< sc_logic > sandbox_Block_proc_U0_ap_start;
    sc_signal< sc_logic > sandbox_Block_proc_U0_ap_done;
    sc_signal< sc_logic > sandbox_Block_proc_U0_ap_continue;
    sc_signal< sc_logic > sandbox_Block_proc_U0_ap_idle;
    sc_signal< sc_logic > sandbox_Block_proc_U0_ap_ready;
    sc_signal< sc_lv<32> > sandbox_Block_proc_U0_result;
    sc_signal< sc_lv<16> > sandbox_Block_proc_U0_video_out_TDATA;
    sc_signal< sc_logic > sandbox_Block_proc_U0_video_out_TVALID;
    sc_signal< sc_logic > sandbox_Block_proc_U0_video_out_TREADY;
    sc_signal< sc_lv<2> > sandbox_Block_proc_U0_video_out_TKEEP;
    sc_signal< sc_lv<2> > sandbox_Block_proc_U0_video_out_TSTRB;
    sc_signal< sc_lv<1> > sandbox_Block_proc_U0_video_out_TUSER;
    sc_signal< sc_lv<1> > sandbox_Block_proc_U0_video_out_TLAST;
    sc_signal< sc_lv<1> > sandbox_Block_proc_U0_video_out_TID;
    sc_signal< sc_lv<1> > sandbox_Block_proc_U0_video_out_TDEST;
    sc_signal< sc_logic > ap_sig_hs_continue;
    sc_signal< sc_logic > result_channel_U_ap_dummy_ce;
    sc_signal< sc_lv<32> > result_channel_din;
    sc_signal< sc_logic > result_channel_write;
    sc_signal< sc_lv<32> > result_channel_dout;
    sc_signal< sc_logic > result_channel_empty_n;
    sc_signal< sc_logic > result_channel_read;
    sc_signal< sc_logic > ap_reg_procdone_sandbox_AXIvideo2Mat_16_640_480_16_U0;
    sc_signal< sc_logic > ap_sig_hs_done;
    sc_signal< sc_logic > ap_reg_procdone_sandbox_Block_proc_U0;
    sc_signal< sc_logic > ap_CS;
    sc_signal< sc_logic > ap_sig_top_allready;
    static const int C_DATA_WIDTH;
    static const int C_WSTRB_WIDTH;
    static const int C_ADDR_WIDTH;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const bool ap_true;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_chn_write_sandbox_AXIvideo2Mat_16_640_480_16_U0_result_channel();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_hs_continue();
    void thread_ap_sig_hs_done();
    void thread_ap_sig_top_allready();
    void thread_result_channel_U_ap_dummy_ce();
    void thread_result_channel_din();
    void thread_result_channel_read();
    void thread_result_channel_write();
    void thread_sandbox_AXIvideo2Mat_16_640_480_16_U0_ap_continue();
    void thread_sandbox_AXIvideo2Mat_16_640_480_16_U0_ap_start();
    void thread_sandbox_AXIvideo2Mat_16_640_480_16_U0_img_data_stream_0_V_full_n();
    void thread_sandbox_AXIvideo2Mat_16_640_480_16_U0_img_data_stream_1_V_full_n();
    void thread_sandbox_AXIvideo2Mat_16_640_480_16_U0_video_in_TDATA();
    void thread_sandbox_AXIvideo2Mat_16_640_480_16_U0_video_in_TDEST();
    void thread_sandbox_AXIvideo2Mat_16_640_480_16_U0_video_in_TID();
    void thread_sandbox_AXIvideo2Mat_16_640_480_16_U0_video_in_TKEEP();
    void thread_sandbox_AXIvideo2Mat_16_640_480_16_U0_video_in_TLAST();
    void thread_sandbox_AXIvideo2Mat_16_640_480_16_U0_video_in_TSTRB();
    void thread_sandbox_AXIvideo2Mat_16_640_480_16_U0_video_in_TUSER();
    void thread_sandbox_AXIvideo2Mat_16_640_480_16_U0_video_in_TVALID();
    void thread_sandbox_Block_proc_U0_ap_continue();
    void thread_sandbox_Block_proc_U0_ap_start();
    void thread_sandbox_Block_proc_U0_result();
    void thread_sandbox_Block_proc_U0_video_out_TREADY();
    void thread_sandbox_CONTROL_BUS_s_axi_U_ap_dummy_ce();
    void thread_video_in_TREADY();
    void thread_video_out_TDATA();
    void thread_video_out_TDEST();
    void thread_video_out_TID();
    void thread_video_out_TKEEP();
    void thread_video_out_TLAST();
    void thread_video_out_TSTRB();
    void thread_video_out_TUSER();
    void thread_video_out_TVALID();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
