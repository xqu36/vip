/*  strfifo.c - The simplest kernel module.
 */
#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/module.h>
#include <linux/slab.h>
#include <linux/io.h>
#include <linux/interrupt.h>

#include <linux/of_address.h>
#include <linux/of_device.h>
#include <linux/of_platform.h>

/* Standard module information, edit as appropriate */
MODULE_LICENSE("GPL");
MODULE_AUTHOR
    ("Xilinx Inc.");
MODULE_DESCRIPTION
    ("strfifo - loadable module template generated by petalinux-create -t modules");

#define DRIVER_NAME "strfifo"

#define FIFO_RESET_MASK 0xA5

	 
#define ISR 0x00 
#define IER 0x04 
#define TDFR 0x08 
#define TDFV 0x0C
#define TDFD 0x10
#define TLR 0x14
#define RDFR 0x18
#define RDFO 0x1C
#define RDFD 0x20
#define RLR 0x24 
#define SRR 0x28
#define TDR 0x2C
#define RDR 0x30
#define TIDR 0x34
#define TxUSER 0x38



/* Simple example of how to receive command line parameters to your module.
   Delete if you don't need them */
/*
unsigned myint = 0xdeadbeef;
char *mystr = "default";

module_param(myint, int, S_IRUGO);
module_param(mystr, charp, S_IRUGO);
*/

struct strfifo_local {
	int irq;
	unsigned long mem_start;
	unsigned long mem_end;

	void __iomem *C_BASEADDR;
};

/*INITIALIZATION FUNCTIONS*/

/*FIFO Reset. Usable from either end of the streaming fifo. Will reset entire core, including
external outputs s2mm_prmry_reset_out_n, mm2s_prmry_reset_out_n, and mm2s_cntrl_reset_out_n. Resets
when register SSR is written with FIFO_RESET_VALUE.*/

static void fifo_core_reset(void)
{
	writel(FIFO_RESET_VALUE, strfifo->C_BASEADDR+SRR);
}



_
static irqreturn_t strfifo_irq(int irq, void *lp)
{
	printk("strfifo interrupt\n");
	return IRQ_HANDLED;
}

/******************/
/* File Operation */
/******************/

static struct file_operations fops = {
	.open = strfifo_open,
	.read = strfifo_read,
	.release = strfifo_release,
	//.unlocked_ioctl = strfifo_ioctl,
};

static int strfifo_open(struct inode *inodep, struct file *filep){
	//
   	return 0;
}

static ssize_t strfifo_read(struct file *filep, char *buffer, size_t len, loff_t *offset){
	int retval;
	// return the data size in the buffer
	return retval;
}
static int strfifo_release(struct inode *inodep, struct file *filep){
   	// from axi_fifo.c
	// not sure what "filep->private_data" does yet. 
	filep->private_data = NULL;
	return 0;
}
/******************/
/* File Operation */
/******************/

static int strfifo_probe(struct platform_device *pdev)
{
	struct resource *r_irq; /* Interrupt resources */
	struct resource *r_mem; /* IO mem resources */
	struct device *dev = &pdev->dev;
	struct strfifo_local *lp = NULL;

	int rc = 0;
	
	dev_info(dev, "Device Tree Probing\n");

	/* Get iospace for the device */
	r_mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
	if (!r_mem) {
		dev_err(dev, "invalid address\n");
		return -ENODEV;
	}
	
	lp = (struct strfifo_local *) kmalloc(sizeof(struct strfifo_local), GFP_KERNEL);
	if (!lp) {
		dev_err(dev, "Cound not allocate strfifo device\n");
		return -ENOMEM;
	}
	
	dev_set_drvdata(dev, lp);
	
	lp->mem_start = r_mem->start;
	lp->mem_end = r_mem->end;

	if (!request_mem_region(lp->mem_start,
				lp->mem_end - lp->mem_start + 1,
				DRIVER_NAME)) {
		dev_err(dev, "Couldn't lock memory region at %p\n",
			(void *)lp->mem_start);
		rc = -EBUSY;
		goto error1;
	}

	lp->base_addr = ioremap(lp->mem_start, lp->mem_end - lp->mem_start + 1);
	if (!lp->base_addr) {
		dev_err(dev, "strfifo: Could not allocate iomem\n");
		rc = -EIO;
		goto error2;
	}

	/* Get IRQ for the device */
	r_irq = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
	if (!r_irq) {
		dev_info(dev, "no IRQ found\n");
		dev_info(dev, "strfifo at 0x%08x mapped to 0x%08x\n",
			(unsigned int __force)lp->mem_start,
			(unsigned int __force)lp->base_addr);
		return 0;
	}
	lp->irq = r_irq->start;
	
	rc = request_irq(lp->irq, &strfifo_irq, 0, DRIVER_NAME, lp);
	if (rc) {
		dev_err(dev, "testmodule: Could not allocate interrupt %d.\n",
			lp->irq);
		goto error3;
	}

	dev_info(dev,"strfifo at 0x%08x mapped to 0x%08x, irq=%d\n",
		(unsigned int __force)lp->mem_start,
		(unsigned int __force)lp->base_addr,
		lp->irq);
	return 0;
error3:
	free_irq(lp->irq, lp);
error2:
	release_mem_region(lp->mem_start, lp->mem_end - lp->mem_start + 1);
error1:
	kfree(lp);
	dev_set_drvdata(dev, NULL);
	return rc;
}

static int strfifo_remove(struct platform_device *pdev)
{
	struct device *dev = &pdev->dev;
	struct strfifo_local *lp = dev_get_drvdata(dev);
	free_irq(lp->irq, lp);
	release_mem_region(lp->mem_start, lp->mem_end - lp->mem_start + 1);
	kfree(lp);
	dev_set_drvdata(dev, NULL);
	return 0;
}

#ifdef CONFIG_OF
static struct of_device_id strfifo_of_match[] = {
	{ .compatible = "vendor,strfifo", },
	{ /* end of list */ },
};
MODULE_DEVICE_TABLE(of, strfifo_of_match);
#else
# define strfifo_of_match
#endif


static struct platform_driver strfifo_driver = {
	.driver = {
		.name = strfifo,
		.owner = GaTech Emb Sys VIP,
		.of_match_table	= strfifo_of_match,
	},
	.probe		= strfifo_probe,
	.remove		= strfifo_remove,
};

static int __init strfifo_init(void)
{
	printk("<1>Hello module world.\n");
	printk("<1>Module parameters were (0x%08x) and \"%s\"\n", myint,
	       mystr);

	return platform_driver_register(&strfifo_driver);
}


static void __exit strfifo_exit(void)
{
	platform_driver_unregister(&strfifo_driver);
	printk(KERN_ALERT "Goodbye module world.\n");
}

/* Comment for Git */
module_init(strfifo_init);
module_exit(strfifo_exit);

